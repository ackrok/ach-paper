%% (1) Load data
load('fullcin_Feb21_ACh+DA+PF.mat')
load('beh_wt_ACh+DA+PF.mat')
sub = cinwt;  % Extract CINs from recordings with ACh
beh = behwt; % Extract ACh recordings

%% Proper Rest Threshold
velThres = 0.25;
Fs = 50;
minRestTime = 4*Fs; minRunTime = 1*Fs;
timeThres = 4*Fs; timeShift = 0.5*Fs;

for idx_b = 1:length(beh)
    vel = beh(idx_b).vel; vel = abs(vel);
    [onsetInd,offsetInd] = getOnsetOffset(-vel,-velThres,minRunTime,minRestTime,1);
    [onsetInd,offsetInd] = adjOnsetOffset(onsetInd,offsetInd,timeThres,vel);
    onsetInd = onsetInd+timeShift; offsetInd = offsetInd-timeShift;
    beh(idx_b).onRest = onsetInd; beh(idx_b).offRest = offsetInd;
end

%% (2) STA
Fs = 50; nShuff = 10; 
peth_gen = struct; peth_gen.bin = 0.01; peth_gen.window = [-1 1]; %CHANGE: window for PETH
peakProm = 1; peakDist = 0.5; % Parameters for FP peaks

mat = struct; % Initialize structure
h = waitbar(0, 'PETH: CIN spikes to acceleration peaks');
for x = 1:length(beh)
    %% Extract spike times
    idx = find(strcmp({sub.rec},beh(x).rec));
    if isempty(idx); continue; end
    st = {sub(idx).st}; % Extract spike times of units from this recording
    fr = [sub(idx).fr]; % Extract firing rate
%     fr = []; % Compute unit firing rate during movement and rest
%     for y = 1:length(idx)
%         fr(y,1) = 1/mean(diff(extractEventST(st{y},beh(x).on/Fs,beh(x).off/Fs,1))); % Event times during movement
%         fr(y,2) = 1/mean(diff(extractEventST(st{y},beh(x).onRest/Fs,beh(x).offRest/Fs,1))); % Event times during rest
%     end
    
    %% Compute Acceleration Peaks
    acc = [beh(x).vel(1); diff(movmean(beh(x).vel,10))];
    %fp = beh(x).FP{1}; fp = (fp - min(fp)) / (max(fp) - min(fp)); % Min Max Normalization
    [pks,locs] = findpeaks(acc,'MinPeakProminence',peakProm,'MinPeakDistance',peakDist); 
    locs = beh(x).time(locs); %location of peaks from time signal

    %% PETH
    peth = getClusterPETH(st, locs, peth_gen); % PETH: spike times aligned to fp peaks
    align = peth.fr;
    alignDelta = []; alignZ = [];
    for y = 1:length(idx)
        alignDelta = [alignDelta, (peth.fr(:,y)-fr(y))./fr(y)]; % Delta firing rate change
%         stShuff = shuffleST(st{y}, nShuff);
%         peth_shuff = getClusterPETH(stShuff, locs, peth_gen); %PETH: shuffled spike times aligned to fp peaks
%         mu = nanmean(nanmean(peth_shuff.fr,2)); sigma = nanmean(nanstd(peth_shuff.fr,[], 2)); 
%         tmp_z = (peth.fr(:,y) - mu)./sigma; % z-score signal using shuffled mu, sigma
%         alignZ = [alignZ, tmp_z]; % add to matrix
    end

    %% Load into output structure
    mat(x).rec = beh(x).rec; mat(x).FPnames{1} = beh(x).FPnames{1}; mat(x).n = [sub(idx).n];
    mat(x).align = align; mat(x).alignDelta = alignDelta; % mat(x).alignZ = alignZ;
    waitbar(x/length(beh),h);
end
close(h); fprintf('Done: aligning CIN spikes to Acceleration Peaks \n');
time = peth.time; 

%% (3) Extract from output structure
align = []; alignDelta = []; % alignZ = []; 
for x = 1:length(mat)
    align = [align, mat(x).align]; % Concatenate all units
    alignDelta = [alignDelta, mat(x).alignDelta]; 
%     alignZ = [alignZ, mat(x).alignZ];
end

%% (4) Plot Average z-score
figure;
% shadederrbar(time, nanmean(align,2), SEM(align,2), 'b'); ylabel('CIN Firing Rate (Hz)');
% shadederrbar(time, nanmean(alignZ,2), SEM(alignZ,2), 'b'); ylabel('CIN Firing Rate (z-score)');
% shadederrbar(time, nanmean(alignDelta,2), SEM(alignDelta,2), 'b'); ylabel('CIN Firing Rate (deltaFR)');
shadederrbar(time, movmean(nanmean(alignDelta,2),10), movmean(SEM(alignDelta,2),10), 'b'); ylabel('CIN Firing Rate (deltaFR)');
xlabel('Latency to Acceleration Peak (s)'); grid on; 
title(sprintf('CIN spikes aligned to Acceleration Peaks (n = %d units)',size(align,2)));
